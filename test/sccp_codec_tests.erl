-module(sccp_codec_tests).
-author('Harald Welte <laforge@gnumonks.org>').

-include_lib("eunit/include/eunit.hrl").

-include("../include/sccp.hrl").

-define(SCCP_UDT_BIN,
        <<9,0,3,13,24,10,18,7,0,18,4,83,132,9,0,23,11,18,6,0,18,4,68,
          119,88,16,70,35,255,100,65,73,4,81,1,2,200,107,42,40,40,6,7,
          0,17,134,5,1,1,1,160,29,97,27,128,2,7,128,161,9,6,7,4,0,0,1,
          0,1,3,162,3,2,1,0,163,5,161,3,2,1,0,108,13,163,11,2,1,64,2,
          1,8,48,3,10,1,0,100,65,73,4,81,1,2,200,107,42,40,40,6,7,0,
          17,134,5,1,1,1,160,29,97,27,128,2,7,128,161,9,6,7,4,0,0,1,0,
          1,3,162,3,2,1,0,163,5,161,3,2,1,0,108,13,163,11,2,1,64,2,1,
          8,48,3,10,1,0,100,65,73,4,81,1,2,200,107,42,40,40,6,7,0,17,
          134,5,1,1,1,160,29,97,27,128,2,7,128,161,9,6,7,4,0,0,1,0,1,
          3,162,3,2,1,0,163,5,161,3,2,1,0,108,13,163,11,2,1,64,2,1,8,
          48,3,10,1,0,100,65,73,4,81,1,2,200,107,42,40,40,6,7,0,17,
          134,5,1,1,1,160,29,97,27,128,2,7,128,161,9,6,7,4,0,0,1,0,1,
          3,162,3,2,1,0,163,5,161,3,2,1,0,108,13>>).

-define(SCCP_UDT_DEC,
        #sccp_msg{msg_type = sccp_msgt_udt,
                  parameters = #sccp_msg_params_udt{
                                  protocol_class = {basic_connectionless, discard_on_error},
                                  called_party_addr = {sccp_addr,0,0,undefined,7,
                                                       {global_title,4,4,0,undefined,1,
                                                        [3,5,4,8,9,0,0,0,7,1]}},
                                  calling_party_addr = {sccp_addr,0,0,undefined,6,
                                                        {global_title,4,4,0,undefined,1,[4,4,7,7,8,5,0,1,6,4,3,2]}},
                                  data = <<100,65,73,4,81,1,2,200,107,42,40,40,
                                           6,7,0,17,134,5,1,1,1,160,29,97,27,
                                           128,2,7,128,161,9,6,7,4,0,0,1,0,1,3,
                                           162,3,2,1,0,163,5,161,3,2,1,0,108,13,
                                           163,11,2,1,64,2,1,8,48,3,10,1,0,100,
                                           65,73,4,81,1,2,200,107,42,40,40,6,7,
                                           0,17,134,5,1,1,1,160,29,97,27,128,2,
                                           7,128,161,9,6,7,4,0,0,1,0,1,3,162,3,
                                           2,1,0,163,5,161,3,2,1,0,108,13,163,
                                           11,2,1,64,2,1,8,48,3,10,1,0,100,65,
                                           73,4,81,1,2,200,107,42,40,40,6,7,0,
                                           17,134,5,1,1,1,160,29,97,27,128,2,7,
                                           128,161,9,6,7,4,0,0,1,0,1,3,162,3,2,
                                           1,0,163,5,161,3,2,1,0,108,13,163,11,
                                           2,1,64,2,1,8,48,3,10,1,0,100,65,73,4,
                                           81,1,2,200,107,42,40,40,6,7,0,17,134,
                                           5,1,1,1,160,29,97,27,128,2,7,128,161,
                                           9,6,7,4,0,0,1,0,1,3,162,3,2,1,0,163,
                                           5,161,3,2,1,0,108,13>>}}).

-define(SCCP_XUDT_BIN,
        <<17,129,15,41,3,14,0,11,18,7,0,17,4,100,7,8,0,48,2,24,
          11,212,73,5,68,161,0,161,173,42,27,37,0,100,18,83,111,64,22,
          15,23,22,17,65,11,18,6,0,17,4,100,39,147,0,16,0>>).

-define(SCCP_XUDT_DEC,
        #sccp_msg{msg_type = sccp_msgt_xudt,
                  parameters = #sccp_msg_params_xudt{
                                  protocol_class = {sequenced_connectionless, return_on_error},
                                  hop_counter = 15,
                                  called_party_addr = {sccp_addr,0,0,undefined,6,
                                                       {global_title,4,4,0,undefined,1,
                                                        [4,6,7,2,3,9,0,0,0,1,0]}},
                                  calling_party_addr = {sccp_addr,0,0,undefined,7,
                                                        {global_title,4,4,0,undefined,1,
                                                         [4,6,7,0,8,0,0,0,0,3,2]}},
                                  data = <<11,212,73,5,68,161,0,161,173,42,27,37,0,100,18,83,111,64,22,
                                           15,23,22,17,65>>}}).

-define(SCCP_XUDTS_BIN,
        <<18,3,15,4,15,26,0,11,18,6,0,17,4,100,39,147,
          0,16,0,11,18,7,0,17,4,100,7,8,0,48,2,149,
          100,129,146,73,4,162,24,0,164,107,38,40,36,
          6,7,0,17,134,5,1,1,1,160,25,97,23,161,9,6,
          7,4,0,0,1,0,14,3,162,3,2,1,0,163,5,161,3,2,
          1,0,108,98,162,96,2,1,1,48,91,2,1,56,163,
          86,161,0,0,82,4,16,0,0,0,52,0,0,
          204,0,60,121,130,0,0,0,125,44,4,8,
          0,0,0,31,137,0,0,91,4,16,6,203,
          0,230,0,0,33,1,0,0,64,0,0,12,
          161,56,4,16,0,0,0,59,0,0,178,168,
          0,0,201,179,86,0,0,22,4,16,214,251,
          199,115,232,32,0,0,147,0,25,0,6,242,
          0,24>>).

-define(SCCP_XUDTS_DEC,
        #sccp_msg{msg_type = sccp_msgt_xudts,
                  parameters = #sccp_msg_params_xudts{
                                  return_cause = subsystem_failure,
                                  hop_counter = 15,
                                  called_party_addr = {sccp_addr,0,0,undefined,6,
                                                       {global_title,4,4,0,undefined,1,
                                                        [4,6,7,2,3,9,0,0,0,1,0]}},
                                  calling_party_addr = {sccp_addr,0,0,undefined,7,
                                                        {global_title,4,4,0,undefined,1,
                                                         [4,6,7,0,8,0,0,0,0,3,2]}},
                                  data = <<100,129,146,73,4,162,24,0,164,107,38,40,36,
                                           6,7,0,17,134,5,1,1,1,160,25,97,23,161,9,6,
                                           7,4,0,0,1,0,14,3,162,3,2,1,0,163,5,161,3,2,
                                           1,0,108,98,162,96,2,1,1,48,91,2,1,56,163,
                                           86,161,0,0,82,4,16,0,0,0,52,0,0,
                                           204,0,60,121,130,0,0,0,125,44,4,8,
                                           0,0,0,31,137,0,0,91,4,16,6,203,
                                           0,230,0,0,33,1,0,0,64,0,0,12,
                                           161,56,4,16,0,0,0,59,0,0,178,168,
                                           0,0,201,179,86,0,0,22,4,16,214,251,
                                           199,115,232,32,0,0,147,0,25,0,6,242,
                                           0,24>>}}).

parse_udt_test() ->
    ?assertEqual({ok, ?SCCP_UDT_DEC}, ossie_sccp_codec:parse_sccp_msg(?SCCP_UDT_BIN)).

encode_udt_test() ->
    ?assertEqual(?SCCP_UDT_BIN, ossie_sccp_codec:encode_sccp_msg(?SCCP_UDT_DEC)).

parse_xudt_test() ->
    ?assertEqual({ok, ?SCCP_XUDT_DEC}, ossie_sccp_codec:parse_sccp_msg(?SCCP_XUDT_BIN)).

reencode_xudt_test() ->
    Encoded = ossie_sccp_codec:encode_sccp_msg(?SCCP_XUDT_DEC),
    ?assertEqual({ok, ?SCCP_XUDT_DEC}, ossie_sccp_codec:parse_sccp_msg(Encoded)).

parse_xudts_test() ->
    ?assertEqual({ok, ?SCCP_XUDTS_DEC}, ossie_sccp_codec:parse_sccp_msg(?SCCP_XUDTS_BIN)).

reencode_xudts_test() ->
    Encoded = ossie_sccp_codec:encode_sccp_msg(?SCCP_XUDTS_DEC),
    ?assertEqual({ok, ?SCCP_XUDTS_DEC}, ossie_sccp_codec:parse_sccp_msg(Encoded)).
